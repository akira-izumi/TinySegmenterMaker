#!/usr/bin/env python
# -*- coding:utf-8 -*-

import re
import sys
from optparse import OptionParser

re_key = re.compile('([a-zA-Z0-9]*):(.*)')
def load(f, scale = 10000):
    model = {}
    for line in f:
        a = line.strip().split('\t')
        if len(a) == 2:
            m = re_key.match(a[0])
            category = m.group(1)
            key = m.group(2)
            value = int(float(a[1]) * scale + 0.5)
            if category not in model:
                model[category] = {key: value}
            else:
                model[category][key] = value
        else:
            model['BIAS'] = int(float(a[0]) * scale + 0.5)
    return model

languages = {}
class language(object):
    def __init__(self, name, ext):
        self.name = name
        self.ext = ext
        self.execute = None

    def __call__(self, func):
        languages[self.name] = self
        self.execute = func
        return func

class javascript(object):
    @classmethod
    def tostr(cls, obj):
        items = []
        for key, value in obj.iteritems():
            if isinstance(value, dict):
                value = cls.tostr(value)
            if not re.match('[a-zA-Z0-9]+', key):
                key = key.replace("'", "\\'")
                key = "'" + key + "'"
            items.append(key + ':' + str(value))
        items.sort()
        return '{' + ','.join(items) + '}'

    @language('javascript', 'js')
    def original(model):
        template = open('templates/javascript.js').read()
        template = template.replace('__MODEL__', javascript.tostr(model))
        return template

    @language('javascriptdp', 'dp.js')
    def dp(model):
        template = open('templates/javascript.dp.js').read()
        template = template.replace('__MODEL__', javascript.tostr(model))
        return template

def main():
    parser = OptionParser()
    parser.add_option("-s", "--scale", dest = "scale",
                      default = 0, type = "int",
                      help="The scale of parameters")
    parser.add_option("-d", "--dir", dest = "dir",
                      default = '.',
                      help="output directory")
    parser.add_option("-o", "--output", dest = "output",
                      default = '',
                      help="output filename")
    parser.add_option("-m", "--model", dest = "model",
                      default = '',
                      help="model filename")
    (options, args) = parser.parse_args()
    if options.model:
        model = load(open(options.model))
    else:
        model = load(sys.stdin)
    lang = args[0]
    if lang == 'all':
        for maker in languages.itervalues():
            with open(options.dir + '/tinysegmenter.' + maker.ext, 'w') as f:
                f.write(maker.execute(model))
    elif lang in languages:
        maker = languages[lang]
        filename = options.output or options.dir + '/tinysegmenter.' + maker.ext
        with open(filename, 'w') as f:
            f.write(maker.execute(model))
    else:
        print >>sys.stderr, "Unknow language:", lang

if __name__ == "__main__":
    main()
